                                    ------------------
                                    Interpreter design
                                    ------------------
                                    ------------------
                                    Feb 6, 2009
                                    ------------------

Components

* Scanning

    JiffleLexer converts the input script into a stream of tokens representing:

    * logical and arithmetic operators

    * numeric values

    * identifiers (variable and method names)

    * expression and statement delimiters


* Token parsing

    Takes the token stream produced by JiffleLexer and attempts to assemble grammatical
elements (statements, expressions, function names, variable names etc). Any syntax errors
in the input script are reported. If the script is error free the parser builds a tree
representation of the script known as an Abstract Syntax Tree or AST, which is much more
conventient to examine and manipulate in subsequent steps than the original script.


* Checking and classifying variables

    VarClassifier examines the AST produced by JiffleParser and checks for any 
variables that are used prior to being assigned values.

    Next it identifies positional variables: those whose value depends, directly or
indirectly, on image position.  For example, in the following jiffle code...

+---
    a = x() / 100;
    b = sqrt(2);
    c = a > b ? 1 : 0;
+---

    <<a>> is positional because it references the in-built x() function (current pixel
x coordinate)

    <<b>> is not positional

    <<c>> is positional because it depends on the 
value of <<a>>


