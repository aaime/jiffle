/*
 * Copyright 2011 Michael Bedward
 *
 * This file is part of jai-tools.
 *
 * jai-tools is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * jai-tools is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with jai-tools.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

group Runtime;

/*
 * This file contains templates used for both direct and indirect runtime class 
 * source code generation.
 *
 * The templates are formatted for the ANTLR StringTemplate libary and are
 * called from the source generator class built from the RuntimeSourceCreator.g
 * grammar file.
 *
 * @author Michael Bedward
 * @since 1.1
 * @version $Id$
 */


////////////////////////////////////////////////////////////
// Class javadocs

javadocs(script) ::= <<
<{/**}>
 * Java runtime class generated from the following Jiffle script:
 * 
 <script: {line | * <line>}; separator="\n">
<{ */}>
>>


////////////////////////////////////////////////////////////
// Constructor
//
// The fields arg holds templates for image-scope variables

ctor(classname, fields) ::= <<
public <classname>() {
    <ctorbody(fields)>
}

>>

ctorbody(fields) ::= <<
<registervars(fields=fields)>
>>

registervars(name, fields) ::= <<
<fields: {field |registerVar("<field.name>", <if(field.init)>true<else>false<endif>);}; separator="\n">
>>

////////////////////////////////////////////////////////////
// Field declaration
//
// This template defines no output. It is used as a
// data structure by other templates.

field(name, type, mods, init) ::= << >>


////////////////////////////////////////////////////////////
// Script option
//
// This template defines no output. It is used as a
// data structure by other templates.

scriptoption(name, value) ::= << >>


////////////////////////////////////////////////////////////
// Helper templates for the runtime template
// 

// Creates an int index field for each image-scope variable
fieldindices(vars) ::= <<
<vars: {var |private final int <var.name> = <i0>;}; separator="\n">
>>


// Formats initializing expressions for option-related fields.
initoptions(opts) ::= <<
protected void initOptionVars() {
    <opts: {opt |<opt>;}; separator="\n">
}
>>

// Getter function for image-scope variable default values
defaultvaluegetter(fields) ::= <<
protected Double getDefaultValue(int index) {
    switch (index) {
        <fields: {field |<defaultvaluecase(index={<i0>}, field=field)>}; separator="\n">
        default:
            return null;
    }
}

>>

// Creates a case statement for a variable default value
defaultvaluecase(index, field) ::= <<
case <index>:  // <field.name>
    return <if(field.init)><field.init><else>null<endif>;
>>


////////////////////////////////////////////////////////////
// Read from source image

getsourcevalue(var, pixel, band) ::= <<
readFromImage("<var>", <if(pixel)><pixel><else>_x, _y<endif>, <if(band)>(int)(<band>)<else>0<endif>)
>>

pixel(x, y) ::= <<
<x>, <y>
>>


////////////////////////////////////////////////////////////
// Code block

block(stmts) ::= <<
{
    <stmts; separator="\n">
}
>>


////////////////////////////////////////////////////////////
// Delimited statement

delimstmt(stmt) ::= "<stmt>;"


////////////////////////////////////////////////////////////
// Loop: while

while(cond, stmt) ::= <<
while (true) {
    if (_FN.sign(<cond>) != 1) break;
    <stmt>
}
>>


////////////////////////////////////////////////////////////
// Loop: until

until(cond, stmt) ::= <<
while (true) {
    if (_FN.sign(<cond>) == 1) break;
    <stmt>
}
>>


////////////////////////////////////////////////////////////
// Loop: foreach with list literal

foreachlist(n, var, list, stmt) ::= <<

Double[] _loopset<n> = {
    <list; separator=",\n">
};
int _index<n>=0;
while (_index<n> \< _loopset<n>.length) {
    double <var> = _loopset<n>[_index<n>];
    <stmt>
    _index<n>++ ;
}
>>


////////////////////////////////////////////////////////////
// Loop: foreach with list variable

foreachlistvar(n, var, listvar, stmt) ::= <<

Iterator _iter<n> = <listvar>.iterator();
while (_iter<n>.hasNext()) {
    double <var> = ((Number) _iter<n>.next()).doubleValue();
    <stmt>
}
>>


////////////////////////////////////////////////////////////
// Loop: foreach with sequence

foreachseq(n, var, lo, hi, stmt) ::= <<

int _lo<n> = (int)(<lo>);
int _hi<n> = (int)(<hi>);
for (int <var> = _lo<n>; <var> \<= _hi<n>; <var>++) <stmt>
>>


////////////////////////////////////////////////////////////
// Loop exit - breakif

breakif(cond) ::= <<
if (_FN.sign(<cond>) == 1) break;
>>


////////////////////////////////////////////////////////////
// con calls
//
// These are treated separately from general functions to 
// ensure lazy evaluation of the alternatives


// This template is called from the grammar
concall(args) ::= <<
<({con<length(args)>})(args)>
>>


////////////////////////////////////////////////////////////
// Helper templates called by concall

con1(cond) ::= <<
(_stk.push(_FN.sign(<first(args)>)) == null ? Double.NaN :
    _stk.peek() != 0 ? 1.0 : 0.0)
>>

con2(args) ::= <<
(_stk.push(_FN.sign(<first(args)>)) == null ? Double.NaN : 
    _stk.peek() != 0 ? <last(args)> : 0.0)
>>

con3(args) ::= <<
(_stk.push(_FN.sign(<first(args)>)) == null ? Double.NaN : 
    _stk.peek() != 0 ? <first(rest(args))> : <last(args)>)
>>

con4(args) ::= <<
(_stk.push(_FN.sign(<first(args)>)) == null ? Double.NaN : 
    _stk.peek() == 1 ? <first(rest(args))> : 
        _stk.peek() == 0 ? <first(rest(rest(args)))> : <last(args)>)
>>


////////////////////////////////////////////////////////////
// If statement
ifcall(cond, case) ::= <<
if (_stk.push(_FN.sign(<cond>)) != null && _stk.peek() != 0) <case>
>>

ifelsecall(cond, case1, case2) ::= <<
if (_stk.push(_FN.sign(<cond>)) != null && _stk.peek() != 0) <case1>
else <case2>
>>


////////////////////////////////////////////////////////////
// General function call

call(name, args) ::= <<
<name>(<args; separator=", ">)
>>


////////////////////////////////////////////////////////////
// Simple binary expressions


binaryexpr(lhs, op, rhs) ::= <<
<lhs> <op> <rhs>
>>

pow(x, y) ::= <<
Math.pow(<x>, <y>)
>>

// this template is a work-around for Janino 2.5.16 being unable
// to compile come expressions with "+=" etc compound ops
compoundassignment(lhs, op, rhs) ::= <<
<lhs> = <lhs> <op> <rhs>
>>


////////////////////////////////////////////////////////////
// Parenthesised expression

par(expr) ::= "(<expr>)"


////////////////////////////////////////////////////////////
// Prefix operator

preop(op, expr) ::= <<
<op><expr>
>>


////////////////////////////////////////////////////////////
// Postfix operator

postop(op, expr) ::= <<
<expr><op>
>>


////////////////////////////////////////////////////////////
// List expressions

listappend(var, expr) ::= <<
<var>.add(<expr>)
>>

listassign(isnew, var, expr) ::= <<
<if(isnew)>List <endif><var> = <expr>
>>

listliteral(exprs) ::= <<
new ArrayList(<listinits(exprs=exprs)>)
>>

// helper for listliteral
listinits(exprs) ::= <<
<first(exprs): {Arrays.asList(new Object[]\{}><exprs; separator=", "><last(exprs): {\})}>
>>
