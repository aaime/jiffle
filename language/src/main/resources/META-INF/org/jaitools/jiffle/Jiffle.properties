#   Copyright (c) 2011-2013, Michael Bedward. All rights reserved. 
#
#   Redistribution and use in source and binary forms, with or without modification, 
#   are permitted provided that the following conditions are met: 
#    
#   - Redistributions of source code must retain the above copyright notice, this  
#     list of conditions and the following disclaimer. 
#    
#   - Redistributions in binary form must reproduce the above copyright notice, this 
#     list of conditions and the following disclaimer in the documentation and/or 
#     other materials provided with the distribution.   
#    
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
#   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
#   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR 
#   ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
#   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON 
#   ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
#   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
#   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
#
# Default property values for the Jiffle compiler
#
# DO NOT EDIT THIS FILE unless you are modifying the Jiffle compiler itself.

root.name = jiffle
runtime.package = org.jaitools.jiffle.runtime

# properties controlling direct evaluation object creation
direct.class = JiffleDirectRuntimeImpl
direct.base.class = AbstractDirectRuntime

# properties controlling indirect evaluation object creation
indirect.class = JiffleIndirectRuntimeImpl
indirect.base.class = AbstractIndirectRuntime

# properties controlling object creation with a user-supplied base class

# For runtime.imports, separate multiple values with semicolons
runtime.imports = 

# ANTLR StringTemplate group files used for runtime source creation
common.source.templates = Runtime.stg
direct.source.templates = DirectRuntime.stg
indirect.source.templates = IndirectRuntime.stg
